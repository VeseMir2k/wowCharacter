{"version":3,"sources":["components/Form.js","components/Character.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","placeholder","name","type","onChange","handleChange","map","region","key","onClick","handleClick","Character","characterData","realm","en_US","level","src","mediaData","avatar_url","alt","gender","faction","race","character_class","active_spec","App","state","accessToken","authorizationApi","btoa","process","handleAPI","fetch","body","headers","Authorization","method","then","response","json","data","setState","access_token","handleCharacterData","toLowerCase","status","alert","handleMediaData","catch","error","console","media","href","e","target","value","preventDefault","componentDidMount","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.67e5d70a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form(props) {\r\n  const regions = [\"EU\", \"US\", \"TW\", \"KR\", \"CN\"];\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label>\r\n          Nazwa postaci:\r\n          <input\r\n            placeholder=\"thomgnar\"\r\n            name=\"name\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            onChange={props.handleChange}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>\r\n          Nazwa serwera:\r\n          <input\r\n            placeholder=\"burning-legion\"\r\n            name=\"realm\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            onChange={props.handleChange}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>\r\n          Nazwa regionu:\r\n          <select\r\n            name=\"region\"\r\n            className=\"form-control\"\r\n            onChange={props.handleChange}\r\n          >\r\n            {regions.map((region) => (\r\n              <option key={region}>{region}</option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={props.handleClick}>\r\n        Szukaj\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction Character(props) {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1>{props.characterData.name}</h1>\r\n      <p>\r\n        {props.characterData.realm.name.en_US} {props.characterData.level}\r\n      </p>\r\n      <img src={props.mediaData.avatar_url} className=\"rounded\" alt=\"avatar\" />\r\n      <p>Płeć: {props.characterData.gender.name.en_US}</p>\r\n      <p>Frakcja: {props.characterData.faction.name.en_US}</p>\r\n      <p>Rasa: {props.characterData.race.name.en_US}</p>\r\n      <p>Klasa: {props.characterData.character_class.name.en_US}</p>\r\n      <p>Specjalizacja: {props.characterData.active_spec.name.en_US}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Character;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./components/Form.js\";\nimport Character from \"./components/Character.js\";\n\nclass App extends React.Component {\n  state = {\n    accessToken: \"\",\n    name: \"thomgnar\",\n    realm: \"burning-legion\",\n    region: \"EU\",\n    characterData: null,\n    mediaData: null,\n  };\n\n  authorizationApi = btoa(\n    `${process.env.REACT_APP_CLIENT_ID}:${process.env.REACT_APP_CLIENT_SECRET}`\n  );\n\n  handleAPI = () => {\n    fetch(\"https://us.battle.net/oauth/token\", {\n      body: \"grant_type=client_credentials\",\n      headers: {\n        Authorization: `Basic ${this.authorizationApi}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      method: \"POST\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ accessToken: data.access_token });\n      });\n  };\n\n  handleCharacterData = () => {\n    fetch(\n      `https://${this.state.region.toLowerCase()}.api.blizzard.com/profile/wow/character/${\n        this.state.realm\n      }/${\n        this.state.name\n      }?namespace=profile-${this.state.region.toLowerCase()}&access_token=${\n        this.state.accessToken\n      }`\n    )\n      .then((response) => {\n        if (response.status === 404 || response.status === 401) {\n          alert(\"Wprowadź poprawne dane!!!\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ characterData: data });\n        this.handleMediaData();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleMediaData = () => {\n    fetch(\n      `${this.state.characterData.media.href}&access_token=${this.state.accessToken}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ mediaData: data });\n      });\n  };\n\n  handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.handleCharacterData();\n  };\n\n  componentDidMount = () => {\n    this.handleAPI();\n  };\n\n  render() {\n    const { characterData, mediaData } = this.state;\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <Form\n                handleChange={this.handleChange}\n                handleClick={this.handleClick}\n              />\n            </div>\n            <div className=\"col\">\n              {characterData && mediaData ? (\n                <Character\n                  characterData={characterData}\n                  mediaData={mediaData}\n                />\n              ) : (\n                false\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}